What happens when you initialize a repository? Why do you need to do it?
	
	It becomes a Git repository. It adds .git folder to the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The files in the staging area are the ones that are going to be commited to the repository. The ones you want to be in your version control. You can have files in your working directory that you don't want in your version control. 

How can you use the staging area to make sure you have one commit per logical change?

	I can choose to only add the files, that makes logical sense, to the staging area before I commit.
	The files that have been modified but aren't in the staging area won't be commited before they are added to the staging area.
	I can compare the working directory with the staging area to see exacty what has changed. 
	I can also compare between the staging area and lastest commit and see what has changed there. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Forexample if your want to add an experimental feautere, that you aren't sure is going to be in the final version of the project, you can add a new branch and test it there, without affecting the main branch. 

How do the diagrams help you visualize the branch structure?

	It gives a great overview of the branch structure. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	You now have one branch with all the commits. The feauters in both branches are now in one. 
	To get an overview? 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	It's smart and fast

	You won't know exactly how the merge was done